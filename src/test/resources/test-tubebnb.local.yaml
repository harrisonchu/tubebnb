# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  # Logger-specific levels.
  loggers:

    # Sets the level for 'com.example.app' to DEBUG.
    com.tubemogul.api.fees: DEBUG

  appenders:
    - type: console



server:
    applicationConnectors:
    - type: http
      port: 8083
    adminConnectors:
    - type: http
      port: 8081


listings.dao.create.table.statement: CREATE TABLE IF NOT EXISTS Listings
                                     (
                                     listing_id BIGINT(20) AUTO_INCREMENT,
                                     email VARCHAR(100),
                                     name VARCHAR(100),
                                     location_id BIGINT(20),
                                     description VARCHAR(100),
                                     type VARCHAR(100),
                                     PRIMARY KEY(listing_id)
                                     );

listings.dao.get.listings.statement: SELECT * FROM Listings WHERE email = ?;

listings.dao.create.listings.statement: INSERT INTO Listings (email, location_id, type, name, description)
                                        VALUES (?, ?, ?, ?, ?);

listings.dao.get.all.listings: SELECT * FROM Listings;

listing.dao.delete.listing: DELETE FROM Listings WHERE listing_id = ?

db.directory: /mnt/airtube_api


user.dao.create.table.statement: CREATE TABLE IF NOT EXISTS Users
                                 (
                                 user_id BIGINT(20) AUTO_INCREMENT,
                                 name VARCHAR(255),
                                 email VARCHAR(255),
                                 office VARCHAR(255),
                                 phone_number BIGINT(20),
                                 is_notify_on_reservation BOOL,
                                 PRIMARY KEY(user_id)
                                 );

user.dao.get.user.statement: SELECT * FROM Users WHERE user_id = ?;
user.dao.create.user.statement: INSERT INTO Users (name, email, office, phone_number, is_notify_on_reservation)
                                  VALUES (?, ?, ?, ?, ?);

reservation.dao.create.table.statement: CREATE TABLE IF NOT EXISTS Reservations
                                        (
                                        reservation_id INTEGER NOT NULL AUTO_INCREMENT,
                                        listing_id INTEGER,
                                        host_user_id INTEGER,
                                        location_id INTEGER,
                                        traveler_user_id INTEGER,
                                        start_time TIMESTAMP,
                                        end_time TIMESTAMP,
                                        status VARCHAR(255),
                                        timezone VARCHAR(255)
                                        )

reservation.dao.get.reservation.statement: SELECT * FROM Reservations WHERE reservation_id = ?;
reservation.dao.create.reservation.statement: INSERT INTO Reservations (listing_id, host_user_id, location_id, traveler_user_id, start_time, end_time, status, timezone) VALUES (?, ?, ?, ?, ?, ?, ?, ?);
