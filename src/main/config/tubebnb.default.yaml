---
server:
  applicationConnectors:
    - type: http
      port: 8080
  adminConnectors:
    - type: http
      port: 8081


# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  # Logger-specific levels.
  loggers:

    # Sets the level for 'com.example.app' to DEBUG.
    com.tubemogul.api.fees: DEBUG


  appenders:
    - type: file
      currentLogFilename: /mnt/logs/tubebnb.log
      threshold: DEBUG
      archive: true
      archivedLogFilenamePattern: /mnt/logs/tubebnb-%d.log
      archivedFileCount: 10
      timeZone: UTC
      logFormat: -%d{yyyy-MM-dd HH:mm:ss}  [%thread] %-5level %logger{35} - %msg %n


cors.allowedMethodsParam: GET,PUT,POST,DELETE,OPTIONS
cors.allowedOriginsParam: "*"
cors.allowedHeadersParam: Authorization,X-Requested-With,Content-Type,Accept,Origin,Content-Length
cors.preflightMaxAgeParam: 5184000

user.dao.create.table.statement: CREATE TABLE IF NOT EXISTS Users
                                 (
                                 user_id BIGINT(20) AUTO_INCREMENT,
                                 name VARCHAR(255),
                                 email VARCHAR(255),
                                 office VARCHAR(255),
                                 phone_number BIGINT(20),
                                 is_notify_on_reservation BOOL,
                                 PRIMARY KEY(user_id),
                                 UNIQUE (email)
                                 );

user.dao.get.user.statement: SELECT * FROM Users WHERE user_id = ?;
user.dao.get.user.by.email: SELECT * FROM Users WHERE name = ?;
user.dao.create.user.statement: INSERT INTO Users (name, email, office, phone_number, is_notify_on_reservation)
                                  VALUES (?, ?, ?, ?, ?);

reservation.dao.create.table.statement: CREATE TABLE Reservations
                                        (
                                        reservation_id INTEGER NOT NULL AUTO_INCREMENT,
                                        listing_id INTEGER,
                                        host_user_id INTEGER,
                                        location_id INTEGER,
                                        traveler_user_id, INTEGER,
                                        start_time TIMESTAMP,
                                        end_time TIMESTAMP,
                                        status ENUM('completed','pending','canceled'),
                                        timezone VARCHAR(255)
                                        FOREIGN KEY (host_user_id) REFERENCES Users(user_id),
                                        FOREIGN KEY (traveler_user_id) REFERENCES Users(user_id);

listings.dao.create.table.statement: CREATE TABLE Listings
                                     (
                                     user_id BIGINT(20),
                                     listing_id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
                                     location_id BIGINT(20),
                                     is_briefcase BOOL,
                                     is_flipflops BOOL,
                                     is_allow_pets BOOL,
                                     is_allow_smoking BOOL,
                                     is_420 BOOL,
                                     PRIMARY KEY(listing_id),
                                     FOREIGN KEY (user_id) REFERENCES Users(user_Id)
                                     );


listings.dao.get.listings.statement: SELECT * FROM Listings WHERE listing_id = ?;

listings.dao.create.listings.statement: INSERT INTO Listings (user_id, location, is_briefcase, is_flipflops,
                                            is_allow_pets, is_allow_smoking)
                                        VALUES (?, ?, ?, ?, ?,?);

